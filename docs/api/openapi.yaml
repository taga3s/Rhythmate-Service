openapi: "3.0.3"

info:
  title: "Rhythmate API"
  description: "RhythmateのAPIです。"
  version: "1.0"

servers:
  - url: "http://localhost:3000/v1"
    description: "ローカル環境"
  - url: "http://example.com"
    description: "本番環境"

tags:
  - name: "users"
    description: "ユーザ情報の操作"
  - name: "quests"
    description: "クエスト情報の操作"
  - name: "tags"
    description: "タグ情報の操作"
  - name: "weeklyReports"
    description: "週次レポート情報の操作"
  - name: "badges"
    description: "バッジ情報の操作"

paths:
  "/users/auth":
    post:
      tags: ["users"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/users/authenticated":
    get:
      tags: ["users"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginUserResponse"
        "400":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/users/logout":
    post:
      tags: ["users"]
      responses:
        "200":
          description: "成功"
        "400":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/users/me":
    get:
      tags: ["users"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginUserResponse"
        "400":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags: ["users"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLoginUserRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLoginUserResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: ["users"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "400":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/quests":
    post:
      tags: ["quests"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQuestRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateQuestResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      tags: ["quests"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQuestsResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/quests/:id":
    patch:
      tags: ["quests"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateQuestResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: ["quests"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteQuestRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteQuestResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/quests/start/:id":
    patch:
      tags: ["quests"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateQuestResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/quests/finish/:id":
    patch:
      tags: ["quests"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateQuestResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/quests/force-finish/:id":
    patch:
      tags: ["quests"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQuestRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateQuestResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/tags":
    get:
      tags: ["tags"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTagsResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags: ["tags"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTagRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTagResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/tags/:id":
    patch:
      tags: ["tags"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTagRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateTagResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags: ["tags"]
      deprecated: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteTagRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteTagResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/weekly-reports":
    get:
      tags: ["weeklyReports"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWeeklyReportsResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/weekly-reports/feedback/:weeklyReportId":
    post:
      tags: ["weeklyReports"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateWeeklyReportFeedBackRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenerateWeeklyReportFeedBackResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/badges":
    get:
      tags: ["badges"]
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListBadgeResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/badges/:id":
    patch:
      tags: ["badges"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AchieveBadgeRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AchieveBadgeResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  "/badges/pin/:id":
    patch:
      tags: ["badges"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PinBadgeRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PinBadgeResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"  
  "/badges/unpin/:id":
    patch:
      tags: ["badges"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnpinBadgeRequest"
      responses:
        "200":
          description: "成功"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnpinBadgeResponse"
        "400":
          description: "クライアントエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: "認証エラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: "サーバーエラー"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status: { type: string, example: "error" }
        message: { type: string, example: "errorMsg" }
      required:
        - status
        - message

    AuthRequest:
      type: object
      properties:
        id_token:
          type: string
      required:
        - id_token
    UpdateLoginUserRequest:
      type: object
      properties:
        name:
          type: string
        image_src:
          type: string
      required:
        - name
        - image_src
    AuthResponse:
      type: object
      properties:
        status:
          type: string
      required:
        - status
    GetLoginUserResponse:
      type: object
      properties:
        status:
          type: string
        name:
          type: string
        email:
          type: string
        exp:
          type: integer
        level:
          type: integer
        imageUrl:
          type: string
      required:
        - status
        - name
        - email
        - exp
        - level
        - imageUrl
    DeleteUserResponse:
      type: object
      properties:
        status:
          type: string
      required:
        - status

    CreateQuestRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        starts_at:
          type: string
        minutes:
          type: integer
        tag_id:
          type: string
        difficulty:
          type: string
          enum: ["EASY", "NORMAL", "HARD"]
        days:
          type: array
          items:
            type: string
            enum: ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]
        state:
          type: string
          enum: ["INACTIVE", "ACTIVE"]
      required:
        - title
        - description
        - starts_at
        - minutes
        - tag_id
        - difficulty
        - days
        - state
    UpdateQuestRequest:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        starts_at:
          type: string
        minutes:
          type: integer
        tag_id:
          type: string
        difficulty:
          type: string
          enum: ["EASY", "NORMAL", "HARD"]
        days:
          type: array
          items:
            type: string
            enum: ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]
      required:
        - title
        - description
        - starts_at
        - minutes
        - tag_id
        - difficulty
        - days
    DeleteQuestRequest:
      type: object
      properties:
        id:
          type: string
      required:
        - id
    QuestBaseResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        starts_at:
          type: string
        started_at:
          type: string
        minutes:
          type: integer
        tag_id:
          type: string
        difficulty:
          type: string
          enum: ["EASY", "NORMAL", "HARD"]
        state:
          type: string
          enum: ["INACTIVE", "ACTIVE"]
        is_succeeded:
          type: boolean
        days:
          type: array
          items:
            type: string
            enum: ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"]
        continuation_level:
          type: integer
        weekly_frequency:
          type: integer
        weekly_completion_count:
          type: integer
        total_completion_count:
          type: integer
      required:
        - id
        - title
        - description
        - starts_at
        - started_at
        - minutes
        - tag_id
        - difficulty
        - state
        - is_succeeded
        - days
        - continuation_level
        - weekly_frequency
        - weekly_completion_count
        - total_completion_count
    CreateQuestResponse:
      allOf:
        - $ref: '#/components/schemas/QuestBaseResponse'
        - type: object
          properties:
            status:
              type: string
      required:
        - id
        - title
        - description
        - starts_at
        - started_at
        - minutes
        - tag_id
        - difficulty
        - state
        - is_succeeded
        - days
        - continuation_level
        - weekly_frequency
        - weekly_completion_count
        - total_completion_count
    UpdateQuestResponse:
      allOf:
        - $ref: '#/components/schemas/QuestBaseResponse'
        - type: object
          properties:
            status:
              type: string
      required:
        - id
        - title
        - description
        - starts_at
        - started_at
        - minutes
        - tag_id
        - difficulty
        - state
        - is_succeeded
        - days
        - continuation_level
        - weekly_frequency
        - weekly_completion_count
        - total_completion_count
    DeleteQuestResponse:
      type: object
      properties:
        status:
          type: string
      required:
        - status
    ListQuestsResponse:
      type: object
      properties:
        status:
          type: string
        quests:
          type: array
          items:
            $ref: '#/components/schemas/QuestBaseResponse'
      required:
        - status
        - quests

    CreateTagRequest:
      type: object
      properties:
        name: { type: string, example: "TechStudy" }
        color: { type: string, example: "Blue" }
      required:
        - name
        - color
    UpdateTagRequest:
      type: object
      properties:
        id: { type: string }
        name: { type: string, example: "TechStudy" }
        color: { type: string, example: "Blue" }
      required:
        - id
        - name
        - color
    DeleteTagRequest:
      type: object
      properties:
        id: { type: string }
      required:
        - id
    TagsBaseResponse:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        color: { type: string }
      required:
        - id
        - name
        - color
    CreateTagResponse:
      allOf:
        - $ref: '#/components/schemas/TagsBaseResponse'
        - type: object
          properties:
            status: { type: string }
          required:
            - status
    UpdateTagResponse:
      allOf:
        - $ref: '#/components/schemas/TagsBaseResponse'
        - type: object
          properties:
            status: { type: string }
          required:
            - status
    ListTagsResponse:
      type: object
      properties:
        status: { type: string }
        tags: { type: array, items: { $ref: '#/components/schemas/TagsBaseResponse' } }
      required:
        - status
        - tags
    DeleteTagResponse:
      type: object
      properties:
        status: { type: string, example: "ok" }
      required:
        - status

    GenerateWeeklyReportFeedBackRequest:
      type: object
      properties:
        weeklyReportId: { type: string }
      required:
        - weeklyReportId
    ListWeeklyReportsResponse:
      type: object
      properties:
        status: { type: string }
        weeklyReports:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              completed_quests: { type: integer }
              failed_quests: { type: integer }
              completed_percentage: { type: number }
              streak_days: { type: integer }
              completed_quests_each_day: { type: array, items: { type: integer } }
              failed_quests_each_day: { type: array, items: { type: integer } }
              feedback: { type: string }
              start_date: { type: string }
              end_date: { type: string }
              user_id: { type: string }
            required:
              - id
              - completed_quests
              - failed_quests
              - completed_percentage
              - streak_days
              - completed_quests_each_day
              - failed_quests_each_day
              - feedback
              - start_date
              - end_date
              - user_id
      required:
        - status
        - weeklyReports
    GenerateWeeklyReportFeedBackResponse:
      type: object
      properties:
        status: { type: string }
        feedBack: { type: string }
      required:
        - status
        - feedBack
    
    BadgeBaseResponse:
      type: object
      properties:
        badge_id: { type: string }
        name: { type: string }
        description: { type: string }
        image_type: { type: string, enum:  ["bow", "cat", "crown", "gem", "horse", "shield", "sword"] }
        frame_color: { type: string, enum: ["bronze", "silver", "gold"] }
        obtained_at: { type: string }
        is_pinned: { type: boolean }
        unlockable: { type: boolean }
      required:
        - badge_id
        - name
        - description
        - image_type
        - frame_color
        - obtained_at
        - is_pinned
        - unlockable
    AchieveBadgeRequest:
      type: object
      properties:
        badge_id: { type: string }
      required:
        - badge_id
    AchieveBadgeResponse:
      allOf:
        - $ref: '#/components/schemas/BadgeBaseResponse'
        - type: object
          properties:
            status: { type: string }
          required:
            - status
    ListBadgeResponse:
      type: object
      properties:
        status: { type: string }
        badgesWithDetail: { type: array, items: { $ref: '#/components/schemas/BadgeBaseResponse' } }
      required:
        - status
        - badgesWithDetail
    PinBadgeRequest:
      type: object
      properties:
        badge_id: { type: string }
      required:
        - badge_id
    PinBadgeResponse:
      allOf:
        - $ref: '#/components/schemas/BadgeBaseResponse'
        - type: object
          properties:
            status: { type: string }
          required:
            - status
    UnpinBadgeRequest:
      type: object
      properties:
        badge_id: { type: string }
      required:
        - badge_id
    UnpinBadgeResponse:
      allOf:
        - $ref: '#/components/schemas/BadgeBaseResponse'
        - type: object
          properties:
            status: { type: string }
          required:
            - status
